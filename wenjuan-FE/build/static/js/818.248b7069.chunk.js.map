{"version":3,"file":"static/js/818.248b7069.chunk.js","mappings":"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","sources":["components/QuestionComponents/QuestionInput/type.ts","components/QuestionComponents/QuestionInput/component.tsx","components/QuestionComponents/QuestionInput/PropComponent.tsx","components/QuestionComponents/QuestionInput/index.ts","components/QuestionComponents/QuestionTitle/type.ts","components/QuestionComponents/QuestionTitle/component.tsx","components/QuestionComponents/QuestionTitle/PropComponent.tsx","components/QuestionComponents/QuestionTitle/index.ts","components/QuestionComponents/QuestionParagraph/type.ts","components/QuestionComponents/QuestionParagraph/component.tsx","components/QuestionComponents/QuestionParagraph/PropComponent.tsx","components/QuestionComponents/QuestionParagraph/index.ts","components/QuestionComponents/QuestionInfo/type.ts","components/QuestionComponents/QuestionInfo/Component.tsx","components/QuestionComponents/QuestionInfo/PropComponent.tsx","components/QuestionComponents/QuestionInfo/index.ts","components/QuestionComponents/QuestionTextarea/type.ts","components/QuestionComponents/QuestionTextarea/component.tsx","components/QuestionComponents/QuestionTextarea/PropComponent.tsx","components/QuestionComponents/QuestionTextarea/index.ts","components/QuestionComponents/QuestionRadio/type.ts","components/QuestionComponents/QuestionRadio/Component.tsx","components/QuestionComponents/QuestionRadio/PropComponent.tsx","utils/getRandomColor.ts","utils/numFormatPer.ts","components/QuestionComponents/QuestionRadio/index.ts","components/QuestionComponents/QuestionRadio/StatComponent.tsx","components/QuestionComponents/QuestionCheckbox/type.ts","components/QuestionComponents/QuestionCheckbox/Component.tsx","components/QuestionComponents/QuestionCheckbox/PropComponent.tsx","components/QuestionComponents/QuestionCheckbox/StatComponent.tsx","components/QuestionComponents/QuestionCheckbox/index.ts","components/QuestionComponents/index.ts","hooks/useGetComponentInfo.ts","hooks/useGetPageInfo.ts","hooks/useLoadingQuestionData.ts"],"sourcesContent":["// 标题组件的类型\nexport type QuestionInputPropsType = {\n  title?: string\n  placeholder?: string\n  onChange?: (newProps: QuestionInputPropsType) => void\n  // 用于锁定组件时禁用表单\n  disabled?: boolean\n}\n\n// 默认的类型\nexport const QuestionInputDefaultProps: QuestionInputPropsType = {\n  title: '输入框标题',\n  placeholder: '请输入...',\n}\n","import React, { FC } from 'react'\nimport { QuestionInputPropsType, QuestionInputDefaultProps } from './type'\nimport { Input, Typography } from 'antd'\n\nconst { Paragraph } = Typography\n\nconst Component: FC<QuestionInputPropsType> = (props: QuestionInputPropsType) => {\n  const { title = '', placeholder = '' } = { ...QuestionInputDefaultProps, ...props }\n\n  return (\n    <div>\n      <Paragraph strong>{title}</Paragraph>\n      <div>\n        <Input placeholder={placeholder}></Input>\n      </div>\n    </div>\n  )\n}\n\nexport default Component\n","import React, { FC, useEffect } from 'react'\nimport { Form, Input } from 'antd'\nimport { QuestionInputPropsType } from './type'\nconst PropComponent: FC<QuestionInputPropsType> = ({ title, placeholder, onChange, disabled }) => {\n  const [form] = Form.useForm()\n  useEffect(() => {\n    form.setFieldsValue({ title, placeholder })\n  }, [title, placeholder])\n\n  // 提交给redux 让他对props进行更改\n  function handleChange() {\n    onChange && onChange(form.getFieldsValue())\n  }\n\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      initialValues={{ title, placeholder }}\n      onValuesChange={handleChange}\n      disabled={disabled}\n    >\n      <Form.Item label=\"标题\" name=\"title\" rules={[{ required: true, message: '请输入标题' }]}>\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"placeholder\" name=\"placeholder\">\n        <Input />\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default PropComponent\n","/**\n * @description 问卷组件输入框\n */\n\nimport Component from './component'\nimport PropComponent from './PropComponent'\nimport { QuestionInputDefaultProps } from './type'\n\nexport * from './type'\n\n// Input组件的配置\nexport default {\n  title: '输入框',\n  type: 'questionInput',\n  Component, // 当前的组件 画布显示\n  PropComponent, // 修改属性 右侧显示\n  defaultProps: QuestionInputDefaultProps,\n}\n","// 标题组件的类型\nexport type QuestionTitlePropsType = {\n  text?: string\n  level?: 1 | 2 | 3 | 4 | 5\n  isCenter?: boolean\n  onChange?: (newProps: QuestionTitlePropsType) => void\n  // 用于锁定组件时禁用表单\n  disabled?: boolean\n}\n\n// 默认的类型\nexport const QuestionTitleDefaultProps: QuestionTitlePropsType = {\n  text: '一行标题',\n  level: 1,\n  isCenter: false,\n}\n","import React, { FC } from 'react'\nimport { QuestionTitlePropsType, QuestionTitleDefaultProps } from './type'\nimport { Typography } from 'antd'\n\nconst { Title } = Typography\n\nconst QuestionTitle: FC<QuestionTitlePropsType> = (props: QuestionTitlePropsType) => {\n  const { text = '', level = 1, isCenter = false } = { ...QuestionTitleDefaultProps, ...props }\n\n  const genFontSize = (level: number) => {\n    if (level === 1) return '24px'\n    if (level === 2) return '20px'\n    return '16px'\n  }\n\n  return (\n    <Title\n      level={level}\n      style={{\n        textAlign: isCenter ? 'center' : 'start',\n        fontSize: genFontSize(level),\n        marginBottom: '0',\n      }}\n    >\n      {text}\n    </Title>\n  )\n}\n\nexport default QuestionTitle\n","import React, { FC, useEffect } from 'react'\nimport { Checkbox, Form, Input, Select } from 'antd'\nimport { QuestionTitlePropsType } from './type'\nconst PropComponent: FC<QuestionTitlePropsType> = ({\n  text,\n  level,\n  isCenter,\n  onChange,\n  disabled,\n}) => {\n  const [form] = Form.useForm() // 获取表单实例\n\n  // 当表单数据变化时，及时通知redux也进行组件数据的改变\n  useEffect(() => {\n    form.setFieldsValue({ text, level, isCenter })\n  }, [text, level, isCenter])\n\n  /**\n   * 表单内容修改后将新值传入父组件 父组件进行redux更新\n   */\n  function handleChange() {\n    onChange && onChange(form.getFieldsValue())\n  }\n\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      initialValues={{ text, level, isCenter }}\n      onValuesChange={handleChange}\n      disabled={disabled}\n    >\n      <Form.Item label=\"标题内容\" name=\"text\" rules={[{ required: true, message: '请输入标题' }]}>\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"层级\" name=\"level\">\n        <Select\n          options={[\n            { value: 1, text: 1 },\n            { value: 2, text: 2 },\n            { value: 3, text: 3 },\n            { value: 4, text: 4 },\n            { value: 5, text: 5 },\n          ]}\n        />\n      </Form.Item>\n      <Form.Item name=\"isCenter\" valuePropName=\"checked\">\n        <Checkbox>居中显示</Checkbox>\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default PropComponent\n","/**\n * @description 问卷组件标题\n */\n\nimport Component from './component'\nimport PropComponent from './PropComponent'\nimport { QuestionTitleDefaultProps } from './type'\n\nexport * from './type'\n\n// Title 组件的配置\nexport default {\n  title: '标题',\n  type: 'questionTitle',\n  Component, // 当前的组件 画布显示\n  PropComponent, // 修改属性 右侧显示\n  defaultProps: QuestionTitleDefaultProps,\n}\n","export type QuestionParagraphPropsType = {\n  text?: string\n  isCenter?: boolean\n  onChange?: (newProps: QuestionParagraphPropsType) => void\n  disabled?: boolean\n}\n\nexport const QuestionParagraphDefaultProps: QuestionParagraphPropsType = {\n  text: '一行段落',\n  isCenter: false,\n}\n","import React, { FC } from 'react'\nimport { Typography } from 'antd'\nimport { QuestionParagraphPropsType, QuestionParagraphDefaultProps } from './type'\n\nconst { Paragraph } = Typography\n\nconst Component: FC<QuestionParagraphPropsType> = (props: QuestionParagraphPropsType) => {\n  const { text = '', isCenter = false } = { ...QuestionParagraphDefaultProps, ...props }\n\n  const textList = text.split('\\n')\n\n  return (\n    <Paragraph style={{ textAlign: isCenter ? 'center' : 'start', marginBottom: '0' }}>\n      {textList.map((t, index) => {\n        return (\n          <span key={index}>\n            {index > 0 && <br />}\n            {t}\n          </span>\n        )\n      })}\n    </Paragraph>\n  )\n}\nexport default Component\n","import React, { FC, useEffect } from 'react'\nimport { Form, Checkbox, Input } from 'antd'\nimport { QuestionParagraphPropsType } from './type'\n\nconst { TextArea } = Input\n\nconst PropComponent: FC<QuestionParagraphPropsType> = (props: QuestionParagraphPropsType) => {\n  const { text, isCenter, disabled, onChange } = props\n  // 获取form实例\n  const [form] = Form.useForm()\n\n  useEffect(() => {\n    form.setFieldsValue({ text, isCenter })\n  }, [text, isCenter])\n\n  // 提交给redux 让他对props进行更改\n  function handleChange() {\n    if (onChange) {\n      onChange(form.getFieldsValue())\n    }\n  }\n\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      initialValues={{ text, isCenter }}\n      disabled={disabled}\n      onValuesChange={handleChange}\n    >\n      <Form.Item label=\"内容\" name=\"text\" rules={[{ required: true, message: '请输入内容' }]}>\n        <TextArea />\n      </Form.Item>\n      <Form.Item label=\"居中\" name=\"isCenter\" valuePropName=\"checked\">\n        <Checkbox>居中显示</Checkbox>\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default PropComponent\n","/**\n * @description 段落组件\n * @author Gzh\n */\nimport Component from './component'\nimport { QuestionParagraphDefaultProps } from './type'\nimport PropComponent from './PropComponent'\nexport * from './type'\n\n// Paragraph组件的配置\nexport default {\n  title: '段落',\n  type: 'questionParagraph',\n  Component,\n  PropComponent,\n  defaultProps: QuestionParagraphDefaultProps,\n}\n","export type QuestionInfoPropsType = {\n  title?: string\n  desc?: string\n  // 用于PropComponent\n  onChange?: (newProps: QuestionInfoPropsType) => void\n  disabled?: boolean\n}\n\nexport const QuestionInfoDefaultProps: QuestionInfoPropsType = {\n  title: '问题标题',\n  desc: '问题描述',\n}\n","import React, { FC } from 'react'\nimport { Typography } from 'antd'\nimport { QuestionInfoPropsType, QuestionInfoDefaultProps } from './type'\n\nconst { Title, Paragraph } = Typography\n\nconst Component: FC<QuestionInfoPropsType> = (props: QuestionInfoPropsType) => {\n  // 把默认值设置上\n  const { title, desc } = { ...QuestionInfoDefaultProps, ...props }\n\n  const descTextList = desc?.split('\\n')\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <Title style={{ fontSize: '24px' }}>{title}</Title>\n      <Paragraph>\n        {descTextList?.map((d, index) => {\n          return (\n            <span key={index}>\n              {index > 0 && <br />}\n              {d}\n            </span>\n          )\n        })}\n      </Paragraph>\n    </div>\n  )\n}\n\nexport default Component\n","import React, { FC, useEffect } from 'react'\nimport { QuestionInfoPropsType } from './type'\nimport { Form, Input } from 'antd'\n\nconst { TextArea } = Input\n\nconst PropComponent: FC<QuestionInfoPropsType> = (props: QuestionInfoPropsType) => {\n  const { title, desc, onChange, disabled } = props\n  const [form] = Form.useForm()\n\n  useEffect(() => {\n    form.setFieldsValue({ title, desc })\n  }, [title, desc])\n\n  function handleChangeValue() {\n    onChange && onChange(form.getFieldsValue())\n  }\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      initialValues={{ title, desc }}\n      disabled={disabled}\n      onValuesChange={handleChangeValue}\n    >\n      <Form.Item label=\"标题\" name=\"title\" rules={[{ required: true, message: '请输入标题' }]}>\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"描述\" name=\"desc\">\n        <TextArea />\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default PropComponent\n","/**'\n * @description 组件信息\n * @author Gzh\n */\nimport Component from './Component'\nimport { QuestionInfoDefaultProps } from './type'\nimport PropComponent from './PropComponent'\n\nexport * from './type'\n\n// 组件信息配置\nexport default {\n  title: '信息',\n  type: 'questionInfo',\n  Component,\n  PropComponent,\n  defaultProps: QuestionInfoDefaultProps,\n}\n","// 标题组件的类型\nexport type QuestionTextareaPropsType = {\n  title?: string\n  placeholder?: string\n  onChange?: (newProps: QuestionTextareaPropsType) => void\n  // 用于锁定组件时禁用表单\n  disabled?: boolean\n}\n\n// 默认的类型\nexport const QuestionTextareaDefaultProps: QuestionTextareaPropsType = {\n  title: '多行输入框标题',\n  placeholder: '请输入...',\n}\n","import React, { FC } from 'react'\nimport { QuestionTextareaPropsType, QuestionTextareaDefaultProps } from './type'\nimport { Input, Typography } from 'antd'\n\nconst { Paragraph } = Typography\nconst { TextArea } = Input\n\nconst Component: FC<QuestionTextareaPropsType> = (props: QuestionTextareaPropsType) => {\n  const { title = '', placeholder = '' } = { ...QuestionTextareaDefaultProps, ...props }\n\n  return (\n    <div>\n      <Paragraph strong>{title}</Paragraph>\n      <div>\n        <TextArea placeholder={placeholder}></TextArea>\n      </div>\n    </div>\n  )\n}\n\nexport default Component\n","import React, { FC, useEffect } from 'react'\nimport { Form, Input } from 'antd'\nimport { QuestionTextareaPropsType } from './type'\n\nconst { TextArea } = Input\n\nconst PropComponent: FC<QuestionTextareaPropsType> = ({\n  title,\n  placeholder,\n  onChange,\n  disabled,\n}) => {\n  const [form] = Form.useForm()\n  useEffect(() => {\n    form.setFieldsValue({ title, placeholder })\n  }, [title, placeholder])\n\n  // 提交给redux 让他对props进行更改\n  function handleChange() {\n    onChange && onChange(form.getFieldsValue())\n  }\n\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      initialValues={{ title, placeholder }}\n      onValuesChange={handleChange}\n      disabled={disabled}\n    >\n      <Form.Item label=\"标题\" name=\"title\" rules={[{ required: true, message: '请输入标题' }]}>\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"placeholder\" name=\"placeholder\">\n        <TextArea />\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default PropComponent\n","/**\n * @description 问卷组件 多行输入\n * @author Gzh\n */\n\nimport Component from './component'\nimport PropComponent from './PropComponent'\nimport { QuestionTextareaDefaultProps } from './type'\n\nexport * from './type'\n\n// Textarea组件的配置\nexport default {\n  title: '多行输入',\n  type: 'questionTextarea',\n  Component, // 当前的组件 画布显示\n  PropComponent, // 修改属性 右侧显示\n  defaultProps: QuestionTextareaDefaultProps,\n}\n","export type OptionType = {\n  label: string\n  value: string\n}\n\nexport type QuestionRadioPropsType = {\n  title?: string\n  isVertical?: boolean\n  options?: Array<OptionType>\n  defaultVale?: string\n  // 用于PropComponent\n  onChange?: (newProps: QuestionRadioPropsType) => void\n  disabled?: boolean\n}\n\nexport const QuestionRadioDefaultProps: QuestionRadioPropsType = {\n  title: '单选框标题',\n  isVertical: false,\n  options: [\n    {\n      label: '选项1',\n      value: 'item1',\n    },\n    {\n      label: '选项2',\n      value: 'item2',\n    },\n    {\n      label: '选项3',\n      value: 'item3',\n    },\n  ],\n  defaultVale: '',\n}\n\n// 统计组件的属性类型\nexport type QuestionRadioStatPropsType = {\n  stat: Array<{ name: string; count: number }>\n}\n","import React, { FC } from 'react'\nimport { Typography, Radio, Space } from 'antd'\nimport { QuestionRadioDefaultProps, QuestionRadioPropsType, OptionType } from './type'\n\nconst { Paragraph } = Typography\n\nconst Component: FC<QuestionRadioPropsType> = (props: QuestionRadioPropsType) => {\n  const {\n    title,\n    isVertical,\n    options = [],\n    defaultVale,\n  } = { ...QuestionRadioDefaultProps, ...props }\n\n  return (\n    <div>\n      <Paragraph strong>{title}</Paragraph>\n      <Radio.Group value={defaultVale}>\n        <Space direction={isVertical ? 'vertical' : 'horizontal'}>\n          {options.toString()}\n          {options.map((item: OptionType) => {\n            return (\n              <Radio key={item.value} value={item.value}>\n                {item.label}\n              </Radio>\n            )\n          })}\n        </Space>\n      </Radio.Group>\n    </div>\n  )\n}\n\nexport default Component\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { FC, useEffect } from 'react'\nimport { Form, Input, Checkbox, Select, Button, Space } from 'antd'\nimport { PlusOutlined, MinusCircleOutlined } from '@ant-design/icons'\nimport { nanoid } from 'nanoid'\nimport { QuestionRadioPropsType, OptionType } from './type'\nconst PropComponent: FC<QuestionRadioPropsType> = (props: QuestionRadioPropsType) => {\n  const { title, isVertical, options, defaultVale, onChange, disabled } = props\n  const [form] = Form.useForm()\n  useEffect(() => {\n    form.setFieldsValue({ title, isVertical, options, defaultVale })\n  }, [title, isVertical, options, defaultVale])\n\n  function handleChangeValue() {\n    if (onChange) {\n      //onChange(form.getFieldsValue())\n      const newValues = form.getFieldsValue() as QuestionRadioPropsType\n      const { options = [] } = newValues\n      options.forEach(item => {\n        if (item.value) return\n        item.value = nanoid(5)\n      })\n      onChange(newValues)\n    }\n  }\n\n  return (\n    <Form\n      form={form}\n      initialValues={{ title, isVertical, options, defaultVale }}\n      layout=\"vertical\"\n      disabled={disabled}\n      onValuesChange={handleChangeValue}\n    >\n      <Form.Item name=\"title\" label=\"标题\" rules={[{ required: true, message: '请输入标题' }]}>\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"选项\">\n        <Form.List name=\"options\">\n          {(fields, { add, remove }) => (\n            <>\n              {fields.map(({ key, name }, index) => {\n                return (\n                  <Space key={key} align=\"baseline\">\n                    {/* 当前选项 输入框 */}\n                    <Form.Item\n                      name={[name, 'label']}\n                      rules={[\n                        { required: true, message: '请输入选项文字' },\n                        {\n                          validator(_, value) {\n                            const { options = [] } = form.getFieldsValue()\n                            let num = 0\n                            options.forEach((item: OptionType) => {\n                              if (item.label === value) num++\n                            })\n                            // num为1 说明只有他自己一个 不然就有多个\n                            if (num === 1) return Promise.resolve()\n                            return Promise.reject(new Error('和其他选项重复了'))\n                          },\n                        },\n                      ]}\n                    >\n                      <Input placeholder=\"输入选项文字...\" />\n                    </Form.Item>\n                    {/* 当前选项 删除按钮 */}\n                    {index > 1 && <MinusCircleOutlined onClick={() => remove(name)} />}\n                  </Space>\n                )\n              })}\n              <Form.Item>\n                <Button\n                  type=\"link\"\n                  icon={<PlusOutlined />}\n                  block\n                  onClick={() => add({ label: '', value: '' })}\n                >\n                  添加选项\n                </Button>\n              </Form.Item>\n            </>\n          )}\n        </Form.List>\n      </Form.Item>\n      <Form.Item label=\"默认选中\" name=\"defaultVale\">\n        <Select value={defaultVale} options={options}></Select>\n      </Form.Item>\n      <Form.Item name=\"isVertical\" valuePropName=\"checked\">\n        <Checkbox>是否竖向排列</Checkbox>\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default PropComponent\n","function getRandomColor() {\n  const letters = '0123456789ABCDEF' // 定义所有可能的字符集合\n  let color = '#' // 初始化颜色变量为\"#\"开头\n\n  for (let i = 0; i < 6; i++) {\n    // 每次取两位字符作为颜色值\n    const randomIndex = Math.floor(Math.random() * 16) // 获取随机索引\n    color += letters[randomIndex] // 将对应的字符添加到color中\n  }\n\n  return color // 返回最终生成的颜色值\n}\n\nexport default getRandomColor\n","/**\n * @description 数字转变成百分比\n * @author Gzh\n */\n\nfunction numFormatPer(n: number) {\n  return (n * 100).toFixed(2)\n}\n\nexport default numFormatPer\n","/***\n * @description 问卷 单选组件\n * @author Gzh\n */\n\nimport Component from './Component'\nimport PropComponent from './PropComponent'\nimport StatComponent from './StatComponent'\nimport { QuestionRadioDefaultProps } from './type'\n\nexport * from './type'\n\n// Radio组件的基本配置\nexport default {\n  title: '单选组件',\n  type: 'questionRadio',\n  Component,\n  PropComponent,\n  defaultProps: QuestionRadioDefaultProps,\n  StatComponent, // 统计组件\n}\n","import React, { FC } from 'react'\nimport { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts'\nimport getRandomColor from '../../../utils/getRandomColor'\nimport { QuestionRadioStatPropsType } from './type'\nimport numFormatPer from '../../../utils/numFormatPer'\nconst StatComponent: FC<QuestionRadioStatPropsType> = ({ stat }) => {\n  const sum = stat.reduce((pre, cur) => {\n    return pre + cur.count\n  }, 0)\n\n  return (\n    <div style={{ width: '300px', height: '400px' }}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart>\n          <Pie\n            dataKey=\"count\"\n            data={stat}\n            cx=\"50%\"\n            cy=\"50%\"\n            outerRadius={50}\n            fill=\"#8884d8\"\n            label={i => `${i.name}: ${numFormatPer(i.count / sum)}%`}\n          >\n            {stat.map((i, index) => {\n              return <Cell key={index} fill={getRandomColor()} />\n            })}\n          </Pie>\n          <Tooltip />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n\nexport default StatComponent\n","export type OptionType = {\n  value: string\n  label: string\n  checked: boolean\n}\n\nexport type QuestionCheckboxPropsType = {\n  title?: string\n  isVertical?: boolean\n  list?: Array<OptionType>\n  // 用于PropComponent\n  onChange?: (newProps: QuestionCheckboxPropsType) => void\n  disabled?: boolean\n}\n\nexport const QuestionCheckboxDefaultProps: QuestionCheckboxPropsType = {\n  title: '多选框标题',\n  isVertical: false,\n  list: [\n    { value: 'item1', label: '选项1', checked: false },\n    { value: 'item2', label: '选项2', checked: false },\n    { value: 'item3', label: '选项3', checked: false },\n  ],\n}\n\n// 统计组件的属性类型\nexport type QuestionCheckboxStatPropsType = {\n  stat: Array<{ name: string; count: number }>\n}\n","import React from 'react'\nimport { Typography, Checkbox, Space } from 'antd'\nimport { QuestionCheckboxPropsType, QuestionCheckboxDefaultProps } from './type'\n\nconst { Paragraph } = Typography\n\nconst Component: React.FC<QuestionCheckboxPropsType> = (props: QuestionCheckboxPropsType) => {\n  const { title, isVertical, list = [] } = { ...QuestionCheckboxDefaultProps, ...props }\n\n  return (\n    <div>\n      <Paragraph strong>{title}</Paragraph>\n      <Space direction={isVertical ? 'vertical' : 'horizontal'}>\n        {list.map(item => {\n          const { value, label, checked } = item\n          return (\n            <Checkbox checked={checked} key={value}>\n              {label}\n            </Checkbox>\n          )\n        })}\n      </Space>\n    </div>\n  )\n}\n\nexport default Component\n","import React, { useEffect } from 'react'\nimport { Form, Input, Checkbox, Space, Button } from 'antd'\nimport { nanoid } from 'nanoid'\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons'\nimport { QuestionCheckboxPropsType, OptionType } from './type'\n\nconst PropComponent: React.FC<QuestionCheckboxPropsType> = (props: QuestionCheckboxPropsType) => {\n  const { title, isVertical, list = [], onChange, disabled } = props\n  const [form] = Form.useForm()\n  useEffect(() => {\n    form.setFieldsValue({ title, isVertical, list })\n  }, [title, isVertical, list])\n\n  function handleChangeValue() {\n    if (onChange) {\n      const newValues = form.getFieldsValue() as QuestionCheckboxPropsType\n      const { list = [] } = newValues\n      list.forEach(item => {\n        if (item.value) return\n        item.value = nanoid(5)\n      })\n      onChange(newValues)\n    }\n  }\n\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      onValuesChange={handleChangeValue}\n      disabled={disabled}\n      initialValues={{ title, isVertical, list }}\n    >\n      <Form.Item label=\"标题\" name=\"title\" rules={[{ required: true, message: '请输入标题' }]}>\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"选项\">\n        <Form.List name=\"list\">\n          {(fields, { add, remove }) => (\n            <>\n              {fields.map(({ key, name }, index) => {\n                return (\n                  <Space key={key} align=\"baseline\">\n                    {/* 当前选项 是否选中 */}\n                    <Form.Item name={[name, 'checked']} valuePropName=\"checked\">\n                      <Checkbox />\n                    </Form.Item>\n                    {/* 当前选项 输入框 */}\n                    <Form.Item\n                      name={[name, 'label']}\n                      rules={[\n                        { required: true, message: '请输入选项文字' },\n                        {\n                          validator(_, value) {\n                            const { list = [] } = form.getFieldsValue()\n                            let num = 0\n                            list.forEach((item: OptionType) => {\n                              if (item.label === value) num++\n                            })\n                            // num为1 说明只有他自己一个 不然就有多个\n                            if (num === 1) return Promise.resolve()\n                            return Promise.reject(new Error('和其他选项重复了'))\n                          },\n                        },\n                      ]}\n                    >\n                      <Input placeholder=\"输入选项文字...\" />\n                    </Form.Item>\n                    {/* 当前选项 删除按钮 */}\n                    {index > 0 && <MinusCircleOutlined onClick={() => remove(name)} />}\n                  </Space>\n                )\n              })}\n              <Form.Item>\n                <Button\n                  type=\"link\"\n                  icon={<PlusOutlined />}\n                  block\n                  onClick={() => add({ value: '', text: '', checkbox: false })}\n                >\n                  添加选项\n                </Button>\n              </Form.Item>\n            </>\n          )}\n        </Form.List>\n      </Form.Item>\n      <Form.Item name=\"isVertical\" valuePropName=\"checked\">\n        <Checkbox>是否竖向排列</Checkbox>\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default PropComponent\n","import React, { FC } from 'react'\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'\nimport { QuestionCheckboxStatPropsType } from './type'\nconst StatComponent: FC<QuestionCheckboxStatPropsType> = ({ stat }) => {\n  return (\n    <div style={{ width: '400px', height: '300px' }}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart\n          width={400}\n          height={300}\n          data={stat}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 0,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Bar dataKey=\"count\" fill=\"#8884d8\" />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n\nexport default StatComponent\n","/**\n * @description 问卷 多选组件\n * @author Gzh\n */\n\nimport Component from './Component'\nimport { QuestionCheckboxDefaultProps } from './type'\nimport PropComponent from './PropComponent'\nimport StatComponent from './StatComponent'\n\nexport * from './type'\n\n// 多选组件基础配置\nexport default {\n  title: '多选',\n  type: 'questionCheckbox',\n  Component,\n  PropComponent,\n  defaultProps: QuestionCheckboxDefaultProps,\n  StatComponent,\n}\n","import { FC } from 'react'\nimport QuestionInputConf, { QuestionInputPropsType } from './QuestionInput'\nimport QuestionTitleConf, { QuestionTitlePropsType } from './QuestionTitle'\nimport QuestionParagraphConf, { QuestionParagraphPropsType } from './QuestionParagraph'\nimport QuestionInfoConf, { QuestionInfoPropsType } from './QuestionInfo'\nimport QuestionTextareaConf, { QuestionTextareaPropsType } from './QuestionTextarea'\nimport QuestionRadioConf, {\n  QuestionRadioPropsType,\n  QuestionRadioStatPropsType,\n} from './QuestionRadio'\nimport QuestionCheckboxConf, {\n  QuestionCheckboxPropsType,\n  QuestionCheckboxStatPropsType,\n} from './QuestionCheckbox'\n\n// 统一 各个组件的prop type\nexport type ComponentPropsType = QuestionInputPropsType &\n  QuestionTitlePropsType &\n  QuestionParagraphPropsType &\n  QuestionInfoPropsType &\n  QuestionTextareaPropsType &\n  QuestionRadioPropsType &\n  QuestionCheckboxPropsType\n\n// 统一各个组件的统计属性类型\ntype ComponentStatPropsType = QuestionRadioStatPropsType & QuestionCheckboxStatPropsType\n// 统一 组件的配置\nexport type ComponentConfType = {\n  title: string\n  type: string\n  // 一个组件的类型用FC 因为这些组件有自己的props类型 所以传入ComponentPropsType\n  Component: FC<ComponentPropsType>\n  PropComponent: FC<ComponentPropsType>\n  defaultProps: ComponentPropsType\n  StatComponent?: FC<ComponentStatPropsType>\n}\n\n// 全部的组件配置列表\nconst componentConfList: Array<ComponentConfType> = [\n  QuestionInputConf,\n  QuestionTitleConf,\n  QuestionParagraphConf,\n  QuestionInfoConf,\n  QuestionTextareaConf,\n  QuestionRadioConf,\n  QuestionCheckboxConf,\n]\n\n// 组件分组 左侧组件库显示\nexport const componentCofGroup = [\n  {\n    groupId: 'text',\n    groupName: '文本显示',\n    components: [QuestionInfoConf, QuestionTitleConf, QuestionParagraphConf],\n  },\n  {\n    groupId: 'input',\n    groupName: '用户输入',\n    components: [QuestionInputConf, QuestionTextareaConf],\n  },\n  {\n    groupId: 'chooseGroup',\n    groupName: '用户选择',\n    components: [QuestionRadioConf, QuestionCheckboxConf],\n  },\n]\n\n/**\n * 通过类型获取组件配置\n * @param type\n * @returns 对应的组件配置\n */\nexport function getComponentConfByType(type: string) {\n  return componentConfList.find(component => component.type === type)\n}\n","import { useSelector } from 'react-redux'\nimport { StateType } from '../store'\nimport { ComponentsStateType } from '../store/componentsReducer'\nconst useGetComponentInfo = () => {\n  const components = useSelector<StateType>(\n    state => state.components.present\n  ) as ComponentsStateType\n\n  const { componentList = [], selectedId = '', copiedComponents } = components\n\n  const selectedComponent = componentList.find(c => c.id === selectedId)\n\n  return {\n    componentList,\n    selectedId,\n    selectedComponent,\n    copiedComponents,\n  }\n}\n\nexport default useGetComponentInfo\n","import { useSelector } from 'react-redux'\nimport type { StateType } from '../store'\nimport type { PageInfoStateType } from '../store/PageInfoReducer'\n\n/**\n * 获取单个问卷信息\n * @returns PageInfoStateType\n */\nconst useGetPageInfo = () => {\n  const pageInfo = useSelector<StateType>(state => state.pageInfo) as PageInfoStateType\n\n  const { title = '', desc = '', js = '', css = '', isPublished = 1 } = pageInfo\n\n  return {\n    title,\n    desc,\n    js,\n    css,\n    isPublished,\n  }\n}\n\nexport default useGetPageInfo\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useRequest } from 'ahooks'\nimport { useDispatch } from 'react-redux'\nimport { getQuestionService } from '../services/question'\nimport { resetComponents } from '../store/componentsReducer'\nimport { resetPageInfo } from '../store/PageInfoReducer'\n\nfunction useLoadingQuestionData() {\n  const { id = '' } = useParams()\n  const dispatch = useDispatch()\n  // ajax 加载数据\n  const { data, loading, error, run } = useRequest(\n    async (id: string) => {\n      if (!id) throw new Error('没有问卷id!')\n      const data = await getQuestionService(id)\n      return data\n    },\n    {\n      manual: true,\n    }\n  )\n  // 根据获取的data 来设置redux store\n  useEffect(() => {\n    if (!data) return\n    const { title = '', componentList = [], isPublished = false, desc, js, css } = data\n\n    // 当进入问卷编辑器 默认选中第一个组件\n    let selectedId = ''\n    if (componentList.length > 0) selectedId = componentList[0].id\n    // 把componentList存储到redux store中\n    dispatch(resetComponents({ componentList, selectedId, copiedComponents: null }))\n    // 把问卷信息存储到redux中\n    dispatch(resetPageInfo({ title, desc, js, css, isPublished }))\n  }, [data])\n\n  // 判断id变化 执行ajax加载问卷数据\n  useEffect(() => {\n    run(id)\n  }, [id])\n\n  return { loading, error }\n}\n\nexport default useLoadingQuestionData\n"],"names":["QuestionInputDefaultProps","title","placeholder","Paragraph","Typography","props","_jsxs","children","_jsx","strong","Input","type","Component","PropComponent","_ref","onChange","disabled","form","Form","useForm","useEffect","setFieldsValue","layout","initialValues","onValuesChange","getFieldsValue","Item","label","name","rules","required","message","defaultProps","QuestionTitleDefaultProps","text","level","isCenter","Title","style","textAlign","fontSize","genFontSize","marginBottom","Select","options","value","valuePropName","Checkbox","QuestionParagraphDefaultProps","textList","split","map","t","index","TextArea","QuestionInfoDefaultProps","desc","descTextList","d","QuestionTextareaDefaultProps","QuestionRadioDefaultProps","isVertical","defaultVale","Radio","Space","direction","toString","item","newValues","forEach","nanoid","List","fields","add","remove","_Fragment","_ref2","key","align","validator","_","num","Promise","resolve","reject","Error","MinusCircleOutlined","onClick","Button","icon","PlusOutlined","block","color","i","Math","floor","random","n","toFixed","StatComponent","stat","sum","reduce","pre","cur","count","width","height","ResponsiveContainer","PieChart","Pie","dataKey","data","cx","cy","outerRadius","fill","concat","numFormatPer","Cell","getRandomColor","Tooltip","QuestionCheckboxDefaultProps","list","checked","checkbox","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","YAxis","Bar","componentConfList","QuestionInputConf","QuestionTitleConf","QuestionParagraphConf","QuestionInfoConf","QuestionTextareaConf","QuestionRadioConf","QuestionCheckboxConf","componentCofGroup","groupId","groupName","components","getComponentConfByType","find","component","useGetComponentInfo","useSelector","state","present","componentList","selectedId","copiedComponents","selectedComponent","c","id","useGetPageInfo","pageInfo","js","css","isPublished","useParams","dispatch","useDispatch","loading","error","run","useRequest","async","getQuestionService","manual","length","resetComponents","resetPageInfo"],"sourceRoot":""}