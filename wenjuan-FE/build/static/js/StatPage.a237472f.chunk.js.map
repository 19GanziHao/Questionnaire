{"version":3,"file":"static/js/StatPage.a237472f.chunk.js","mappings":"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","sources":["webpack://questionnaire/./src/pages/Question/Stat/StatHeader/index.module.scss?9380","pages/Question/Stat/StatHeader/index.tsx","webpack://questionnaire/./src/pages/Question/Stat/index.module.scss?defd","webpack://questionnaire/./src/pages/Question/Stat/ComponentList/index.module.scss?6725","pages/Question/Stat/ComponentList/index.tsx","pages/Question/Stat/StatPage/index.tsx","services/stat/index.ts","pages/Question/Stat/StatCharts/index.tsx","pages/Question/Stat/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"header-wrapper\":\"StatHeader_header-wrapper__OdJqN\",\"header\":\"StatHeader_header__eh3Eb\"};","import React, { useRef, useMemo } from 'react'\nimport type { InputRef } from 'antd'\nimport QRCode from 'qrcode.react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { Space, Button, Typography, Input, Tooltip, message, Popover } from 'antd'\nimport { CopyOutlined, LeftOutlined, QrcodeOutlined } from '@ant-design/icons'\nimport useGetPageInfo from '@/hooks/useGetPageInfo'\nimport styles from './index.module.scss'\n\nconst { Title } = Typography\n\nconst StatHeader: React.FC = () => {\n  const nav = useNavigate()\n  const { title } = useGetPageInfo()\n  const { id } = useParams()\n  // 拷贝url\n  const urlInputRef = useRef<InputRef>(null)\n  function copy() {\n    const ele = urlInputRef.current\n    if (!ele) return\n    ele.select()\n    document.execCommand('copy') // 拷贝选中的内容\n    message.success('拷贝成功😊')\n  }\n\n  // 生成链接和二维码\n  // 使用useMemo 1，依赖项是否经常变化 2，缓存的元素是否创建成本较高\n  const LinkAndQRCodeElem = useMemo(() => {\n    const url = `http://localhost:3000/question/${id}`\n\n    // 定义二维码组件\n    const QRCodeElem = (\n      <div>\n        <QRCode value={url} size={150} />\n      </div>\n    )\n\n    return (\n      <Space>\n        <Input value={url} style={{ width: '300px' }} ref={urlInputRef} />\n        <Tooltip title=\"拷贝链接\">\n          <Button icon={<CopyOutlined />} onClick={copy}></Button>\n        </Tooltip>\n        <Popover content={QRCodeElem}>\n          <Button icon={<QrcodeOutlined />}></Button>\n        </Popover>\n      </Space>\n    )\n  }, [id])\n  return (\n    <div className={styles['header-wrapper']}>\n      <div className={styles.header}>\n        <div>\n          <Space>\n            <Button type=\"link\" icon={<LeftOutlined />} onClick={() => nav(-1)}>\n              返回\n            </Button>\n            <Title>{title}</Title>\n          </Space>\n        </div>\n        <div>{LinkAndQRCodeElem}</div>\n        <div>\n          <Button type=\"primary\" onClick={() => nav(`/question/edit/${id}`)}>\n            编辑问卷\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default StatHeader\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Stat_container__3jCj8\",\"content-wrapper\":\"Stat_content-wrapper__wNYlg\",\"content\":\"Stat_content__rASIu\",\"left\":\"Stat_left__2aZMU\",\"main\":\"Stat_main__+CW-0\",\"right\":\"Stat_right__dqMPG\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ComponentList_container__ixnwF\",\"container-wrapper\":\"ComponentList_container-wrapper__6pVuD\",\"selected\":\"ComponentList_selected__qK6tK\",\"component\":\"ComponentList_component__IF89K\"};","import React, { FC } from 'react'\nimport classNames from 'classnames'\nimport useGetComponentInfo from '@/hooks/useGetComponentInfo'\nimport styles from './index.module.scss'\nimport { getComponentConfByType } from '@/components/QuestionComponents'\n\ntype PropsType = {\n  selectedComponentId: string\n  setSelectedComponentId: (id: string) => void\n  setSelectedComponentType: (type: string) => void\n}\n\nconst ComponentList: FC<PropsType> = (props: PropsType) => {\n  const { selectedComponentId, setSelectedComponentId, setSelectedComponentType } = props\n  const { componentList } = useGetComponentInfo()\n  return (\n    <div className={styles.container}>\n      {componentList\n        .filter(c => !c.isHidden)\n        .map(item => {\n          const { id, props, type } = item\n          const componentConf = getComponentConfByType(type)\n          if (!componentConf) return\n          const { Component } = componentConf\n\n          // 拼接class name\n          const wrapperDefaultClassName = styles['container-wrapper']\n          const selectedClassName = styles.selected\n          const wrapperClassName = classNames({\n            [wrapperDefaultClassName]: true,\n            [selectedClassName]: id === selectedComponentId,\n          })\n          return (\n            <div\n              className={wrapperClassName}\n              key={id}\n              onClick={() => {\n                setSelectedComponentId(id)\n                setSelectedComponentType(type)\n              }}\n            >\n              <div className={styles.component}>\n                <Component {...props} />\n              </div>\n            </div>\n          )\n        })}\n    </div>\n  )\n}\n\nexport default ComponentList\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { FC, useState } from 'react'\nimport { Typography, Spin, Table, Pagination } from 'antd'\nimport { useRequest } from 'ahooks'\nimport { useParams } from 'react-router-dom'\nimport { getQuestionStatListService } from '@/services/stat'\nimport useGetComponentInfo from '@/hooks/useGetComponentInfo'\ntype PropsType = {\n  selectedComponentId: string\n  setSelectedComponentId: (id: string) => void\n  setSelectedComponentType: (type: string) => void\n}\ntype arrType = {\n  [key: string]: any\n}\nconst { Title } = Typography\n\nconst StatPage: FC<PropsType> = props => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { selectedComponentId, setSelectedComponentId, setSelectedComponentType } = props\n  const { id = '' } = useParams()\n  const [total, setTotal] = useState(0)\n  const [list, setList] = useState([])\n  const [page, setPage] = useState(1)\n  const [pageSize, setPageSize] = useState(10)\n  const { componentList } = useGetComponentInfo()\n  const { loading } = useRequest(\n    async () => {\n      const data = await getQuestionStatListService(id, { page, pageSize })\n      return data\n    },\n    {\n      refreshDeps: [page, pageSize],\n      onSuccess(res) {\n        const { total, records = [] } = res\n        setTotal(total)\n        setList(records)\n      },\n    }\n  )\n  // 表格的每列\n  const columns = componentList.map(c => {\n    const { id, title, props, type } = c\n    const colTitle = props!.title || title\n\n    return {\n      // 此title还可以是jsx\n      // title: colTitle,\n      title: (\n        <div\n          style={{ cursor: 'pointer' }}\n          onClick={() => {\n            setSelectedComponentId(id)\n            setSelectedComponentType(type)\n          }}\n        >\n          <span style={{ color: id === selectedComponentId ? '#1890ff' : 'inherit' }}>\n            {colTitle}\n          </span>\n        </div>\n      ),\n      dataIndex: id,\n    }\n  })\n  // 转换后端的数据格式\n  function transformData(originalData: any) {\n    const transformedData: { identification: any }[] = []\n\n    for (const item of originalData) {\n      const userIdentification = item.identification\n\n      // 如果用户标识符不存在，则创建一个新的对象\n      if (!transformedData.some(user => user.identification === userIdentification)) {\n        const userObject = {\n          identification: userIdentification,\n        }\n        transformedData.push(userObject)\n      }\n\n      // 将答案添加到用户对象\n      const userObject: arrType =\n        transformedData.find(user => user.identification === userIdentification) || []\n      userObject[item.id] = item.answerContent\n    }\n\n    return transformedData\n  }\n\n  const transformedData = transformData(list)\n\n  // 因为table组件中dataSource需要一个key字段\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const dataSource = transformedData.map((i: any) => {\n    return { ...i, key: i.identification }\n  })\n\n  const TableElem = (\n    <>\n      <Table columns={columns} dataSource={dataSource} pagination={false} />\n      <div style={{ marginTop: '20px', textAlign: 'center' }}>\n        <Pagination\n          total={total}\n          pageSize={pageSize}\n          current={page}\n          onChange={page => setPage(page)}\n          onShowSizeChange={(page, pageSize) => {\n            setPage(page)\n            setPageSize(pageSize)\n          }}\n        />\n      </div>\n    </>\n  )\n\n  return (\n    <div>\n      <Title level={3}>答卷数量: {!loading && total}</Title>\n      {loading && (\n        <div style={{ textAlign: 'center' }}>\n          <Spin />\n        </div>\n      )}\n      {!loading && TableElem}\n    </div>\n  )\n}\n\nexport default StatPage\n","import axios, { ResultDataType } from '../ajax'\n\n/*\n * 获取问卷统计列表\n * @param questionId 问卷id\n * @param opt 分页\n * @returns\n */\nexport async function getQuestionStatListService(\n  questionId: string,\n  opt: { page: number; pageSize: number }\n): Promise<ResultDataType> {\n  const url = `/api/stat/${questionId}`\n  const data = (await axios.get(url, { params: opt })) as ResultDataType\n  return data\n}\n\n/**\n * 获取单个组件的统计数据\n * @param questionId\n * @param componentId\n * @returns\n */\nexport async function getComponentStatService(\n  questionId: string,\n  componentId: string\n): Promise<ResultDataType> {\n  const url = `/api/stat/${questionId}/${componentId}`\n  const data = (await axios.get(url)) as ResultDataType\n  return data\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { FC, useEffect, useState } from 'react'\nimport { Typography } from 'antd'\nimport { useRequest } from 'ahooks'\nimport { useParams } from 'react-router-dom'\nimport { getComponentStatService } from '@/services/stat'\nimport { getComponentConfByType } from '@/components/QuestionComponents'\nconst { Title } = Typography\n\ntype PropsType = {\n  selectedComponentId: string\n  selectedComponentType: string\n}\n\nconst StatCharts: FC<PropsType> = props => {\n  const { selectedComponentId, selectedComponentType } = props\n  const { id = '' } = useParams()\n  const [stat, setStat] = useState([])\n  const { run } = useRequest(\n    async (questionId, componentId) => await getComponentStatService(questionId, componentId),\n    {\n      manual: true,\n      onSuccess(res) {\n        setStat(res.stat)\n      },\n    }\n  )\n  // 监听选中的组件id 可以及时切换图表\n  useEffect(() => {\n    if (selectedComponentId) run(id, selectedComponentId)\n  }, [id, selectedComponentId])\n\n  // 生成统计图表\n  function genStatElem() {\n    if (!selectedComponentId) return <div>未选中组件</div>\n\n    const { StatComponent } = getComponentConfByType(selectedComponentType) || {}\n\n    if (!StatComponent) return <div>该组件无统计图表</div>\n\n    return <StatComponent stat={stat} />\n  }\n\n  return (\n    <>\n      <Title level={3}>图表统计</Title>\n      <div>{genStatElem()}</div>\n    </>\n  )\n}\n\nexport default StatCharts\n","import React, { FC, useState } from 'react'\nimport { Spin, Result, Button } from 'antd'\nimport { useNavigate } from 'react-router-dom'\nimport useTitle from '@/hooks/useTitle'\nimport useLoadingQuestionData from '@/hooks/useLoadingQuestionData'\nimport useGetPageInfo from '@/hooks/useGetPageInfo'\nimport StatHeader from './StatHeader'\nimport styles from './index.module.scss'\nimport ComponentList from './ComponentList'\nimport StatPage from './StatPage'\nimport StatCharts from './StatCharts'\nconst Stat: FC = () => {\n  const { loading } = useLoadingQuestionData()\n  const { isPublished, title } = useGetPageInfo()\n  const nav = useNavigate()\n  const [selectedComponentId, setSelectedComponentId] = useState('')\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [selectedComponentType, setSelectedComponentType] = useState('')\n  useTitle('问卷统计 - ' + title)\n\n  const LoadingElem = (\n    <div style={{ textAlign: 'center', marginTop: '60px' }}>\n      <Spin />\n    </div>\n  )\n\n  const genContentElem = () => {\n    if (typeof isPublished === 'boolean' && !isPublished) {\n      return (\n        <Result\n          status=\"warning\"\n          title=\"您访问的问卷未发布\"\n          extra={\n            <Button type=\"primary\" onClick={() => nav(-1)}>\n              返回\n            </Button>\n          }\n        ></Result>\n      )\n    }\n    return (\n      <>\n        <div className={styles.left}>\n          <ComponentList\n            selectedComponentId={selectedComponentId}\n            setSelectedComponentId={setSelectedComponentId}\n            setSelectedComponentType={setSelectedComponentType}\n          />\n        </div>\n        <div className={styles.main}>\n          <StatPage\n            selectedComponentId={selectedComponentId}\n            setSelectedComponentId={setSelectedComponentId}\n            setSelectedComponentType={setSelectedComponentType}\n          />\n        </div>\n        <div className={styles.right}>\n          <StatCharts\n            selectedComponentId={selectedComponentId}\n            selectedComponentType={selectedComponentType}\n          />\n        </div>\n      </>\n    )\n  }\n\n  return (\n    <div className={styles.container}>\n      <StatHeader />\n      <main className={styles['content-wrapper']}>\n        {loading && LoadingElem}\n        {!loading && <div className={styles.content}>{genContentElem()}</div>}\n      </main>\n    </div>\n  )\n}\n\nexport default Stat\n"],"names":["Title","Typography","StatHeader","nav","useNavigate","title","useGetPageInfo","id","useParams","urlInputRef","useRef","copy","ele","current","select","document","execCommand","message","success","LinkAndQRCodeElem","useMemo","url","concat","QRCodeElem","_jsx","children","QRCode","value","size","_jsxs","Space","Input","style","width","ref","Tooltip","Button","icon","CopyOutlined","onClick","Popover","content","QrcodeOutlined","className","styles","type","LeftOutlined","props","selectedComponentId","setSelectedComponentId","setSelectedComponentType","componentList","useGetComponentInfo","filter","c","isHidden","map","item","componentConf","getComponentConfByType","Component","wrapperDefaultClassName","selectedClassName","wrapperClassName","classNames","total","setTotal","useState","list","setList","page","setPage","pageSize","setPageSize","loading","useRequest","async","questionId","opt","axios","get","params","getQuestionStatListService","refreshDeps","onSuccess","res","records","columns","colTitle","cursor","color","dataIndex","dataSource","originalData","transformedData","userIdentification","identification","some","user","userObject","push","find","answerContent","transformData","i","key","TableElem","_Fragment","Table","pagination","marginTop","textAlign","Pagination","onChange","onShowSizeChange","level","Spin","selectedComponentType","stat","setStat","run","componentId","getComponentStatService","manual","useEffect","StatComponent","genStatElem","Stat","useLoadingQuestionData","isPublished","useTitle","LoadingElem","ComponentList","StatPage","StatCharts","Result","status","extra"],"sourceRoot":""}